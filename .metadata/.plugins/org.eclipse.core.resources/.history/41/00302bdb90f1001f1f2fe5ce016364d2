package proativa.projeto.modelo;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.poifs.crypt.dsig.services.RevocationDataService;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.stage.FileChooser;
import javafx.stage.Stage;

public class Arquivo {

	private String nomeArquivo;
	private File arquivoSelecionado;
	private boolean campoArqivoVazio = true;

	private int numDaColunaFiltrada1 = 0;
	private int numDaColunaFiltrada2 = 1;
	
	private DadosPessoasServicos  servicoDeDados = DadosPessoasServicos.getInstance();

	public List<Pessoa> pessoas = new ArrayList<>();

	public Arquivo() {

	}

	public Arquivo(ActionEvent event) throws Exception {
		buscarArquivo(event);
	}

	// Selecionar um arquivo pelo Windows Explorer
	public void buscarArquivo(ActionEvent event) {

		try {
			FileChooser selecionarArquivo = new FileChooser();
			selecionarArquivo.setTitle("Selecionar Arquivo Excel");
			selecionarArquivo.getExtensionFilters()
					.addAll(new FileChooser.ExtensionFilter("Arquivos Excel", "*.xls", "*.xlsx"));
			Stage stage = (Stage) ((javafx.scene.Node) event.getSource()).getScene().getWindow();
			arquivoSelecionado = selecionarArquivo.showOpenDialog(stage);
			
			nomeArquivo = arquivoSelecionado.getName();
			if (!arquivoSelecionado.getName().equalsIgnoreCase("selecione o arquivo!")) {
				campoArqivoVazio = false;
			}

		} catch (Exception e) {
			nomeArquivo = "selecione o arquivo!";
			campoArqivoVazio = true;
		}

	}

	// Trata um arquivo se ele for .XLS ou .XLSX
	public void lerArquivo() {

		// FiltroColunaCpf foi um jeito de escolher a coluna CPF
		boolean filtroColunaCpf;
		String cpf;
		String email;
		String nomeCelula;
//		int contador = 0;

		try (FileInputStream arquivo = new FileInputStream(arquivoSelecionado)) {
			Workbook workbook;
			if (nomeArquivo.endsWith(".xlsx")) {
				workbook = new XSSFWorkbook(arquivo);
			} else {
				workbook = new HSSFWorkbook(arquivo);
			}

			Sheet sheet = workbook.getSheetAt(0);

			int rowIndex = 0;

			for (Row linha : sheet) {

				// Pula a primeira linha da planilha

				if (rowIndex == 0) {
					rowIndex++;
					continue;
				}

				for (Cell celula : linha) {

					nomeCelula = celula.getAddress().toString();
					filtroColunaCpf = nomeCelula.toUpperCase().startsWith("A");

					if (filtroColunaCpf) {
						switch (celula.getCellType()) {

						case STRING:
							cpf = linha.getCell(numDaColunaFiltrada1).toString(); // Seleciona a coluna de indice 3
							email = linha.getCell(numDaColunaFiltrada2).toString(); // Seleciona a coluna de indice 4
							Pessoa pessoa = new Pessoa(cpf, email);
							pessoas.add(pessoa);

//						System.out.println(cpf + " | " + email);  // para ver ser está pegando as informações coretas
//						contador++;
							break;

						case NUMERIC:
//						 System.out.print(celula.getNumericCellValue() + " | \t");
							break;

						case BOOLEAN:
//						 System.out.print(celula.getBooleanCellValue() + " | \t");
							break;

						case FORMULA:
//						 System.out.print(celula.getCellFormula() + " | \t");
							break;

						default:
//						System.out.print("Desconhecido \t");

						}
					}
//				 System.out.println();
					rowIndex++;
				}
			}
//			System.out.println("Linhas percorridas:  " + contador); // para ver quantas linhas percorreu
			workbook.close();

		} catch (IOException e) {
			e.printStackTrace();
		}
		for (Pessoa pessoa : pessoas) {
			System.out.println(pessoa.getEmail());
		}
	}
	
	public void setDadosPessoas() {
		if(arquivoSelecionado != null) {
			servicoDeDados.setPessoas(pessoas);
		}
	}

	public String getNome() {
		return nomeArquivo;
	}

	public boolean isCampoArquivoVazio() {
		return campoArqivoVazio;
	}

}
